app/src/main/res/layout/activity_my.xml
窗口布局文件

app/src/main/java/com.mycompany.myfirstapp/MyActivity.java
Activity类的定义

app/src/main/AndroidManifest.xml
manifest文件描述了项目的基本特征并列出了组成应用的各个组件

res/values/string.xml
Android项目包含一个字符串资源文件

android:orientation="horizontal"
用于放置水平或者垂直放置子视图的部件

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal">

LinearLayout是ViewGroup的一个子类，用于放置水平或者垂直放置子视图的部件

android:layout_width="match_parent"
android:layout_height="match_parent"
对于所有的Views都需要对这两个属性进行设置来指定尺寸
match_parent  该值表示子View扩张自己width和height来匹配父控件的width和height。
wrap_content  设置一个视图的尺寸为wrap_content将强制性地使视图扩展以显示全部内容。

ex1: 文本框
<EditText android:id="@+id/edit_message"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:hint="@string/edit_message" />

当你想从XML里使用资源类的时候必须使用@符号，紧随 @ 之后的是资源的类型(这里是 id )，然后是资源的名字(这里使用的是 edit_message )。(其他的资源可以使用相同的名字只要他们不是相同的资源类型，例如：字符串资源可以使用相同的名字)。

+号只是当你第一次定义一个资源ID的时候需要,一旦资源ID被创建了，其他资源如果引用这个ID就不再需要+号了。这里是唯一一个需要+号的属性。

android:hint
当文本框为空的时候,会默认显示这个字符串。对于字符串 @string/edit_message 的值所引用的资源应该是定义在单独的文件里，而不是直接使用字符串。
<string name="edit_message">Enter a message</string>  文件中定义

ex2:按钮
<Button
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="@string/button_send" 
android:onClick="sendMessage"  />

MyActivity.java

public final static String EXTRA_MESSAGE = "com.mycompany.myfirstapp.MESSAGE";
public void sendMessage(View view) {
Intent intent = new Intent(this, DisplayMessageActivity.class);
EditText editText = (EditText) findViewById(R.id.edit_message);
String message = editText.getText().toString();
intent.putExtra(EXTRA_MESSAGE, message);
startActivity(intent);
}

Intent是在不同组件中提供运行时连接的对象(比如两个Activity)。 Intent 代表一个应用"想去做什么事"，你可以用它做各种各样的任务，不过大部分的时候他们被用来启动另一个Activity。

把EditText的文本内容关联到一个本地变量并使用putExtra()方法把值传给intent.

在java下的包中右键新建一个Blank Activity(Activity Name: DisplayMessageActivity)
DisplayMessageActivity.java
onCreate()方法:
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
// Get the message from the intent
Intent intent = getIntent();
String message = intent.getStringExtra(MyActivity.EXTRA_MESSAGE);
// Create the text view
TextView textView = new TextView(this);
textView.setTextSize(40);
textView.setText(message);
// Set the text view as the activity layout
setContentView(textView);
}
